// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gozelle/gin"
	"gitlab.forceup.in/fil-data-factory/filscan-backend/injector"
	"gitlab.forceup.in/fil-data-factory/filscan-backend/modules/common/config"
	"gitlab.forceup.in/fil-data-factory/filscan-backend/pkg/redis"
)

// Injectors from wire.go:

func wireApp(conf *config.Config) (*gin.Engine, func(), error) {
	adapter, err := injector.NewLondobellAdapter(conf)
	if err != nil {
		return nil, nil, err
	}
	agg, err := injector.NewLondobellAgg(conf)
	if err != nil {
		return nil, nil, err
	}
	db, cleanup, err := injector.NewGormDB(conf)
	if err != nil {
		return nil, nil, err
	}
	typer := injector.NewTyper(db, adapter)
	abiDecoderAPI, err := injector.NewAbiDecoderClient(conf)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	browserAPI := injector.NewBrowserAPI(conf, agg, adapter, typer, db, abiDecoderAPI)
	minerAgg, err := injector.NewLondobellMinerAgg(conf)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client, err := injector.NewMailClient(conf)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	redisRedis := redis.NewRedis(conf)
	fullAPI := injector.NewPro(conf, db, adapter, agg, minerAgg, client, redisRedis)
	engine := newApp(conf, adapter, browserAPI, fullAPI, db, redisRedis)
	return engine, func() {
		cleanup()
	}, nil
}
