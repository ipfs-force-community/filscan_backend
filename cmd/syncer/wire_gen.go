// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gozelle/gin"
	"gitlab.forceup.in/fil-data-factory/filscan-backend/injector"
	"gitlab.forceup.in/fil-data-factory/filscan-backend/modules/common/config"
	"gitlab.forceup.in/fil-data-factory/filscan-backend/pkg/redis"
)

// Injectors from wire.go:

func wireApp(conf *config.Config) (*gin.Engine, func(), error) {
	adapter, err := injector.NewLondobellAdapter(conf)
	if err != nil {
		return nil, nil, err
	}
	db, cleanup, err := injector.NewGormDB(conf)
	if err != nil {
		return nil, nil, err
	}
	agg, err := injector.NewLondobellAgg(conf)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	minerAgg, err := injector.NewLondobellMinerAgg(conf)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	abiDecoderAPI, err := injector.NewAbiDecoderClient(conf)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	redisRedis := redis.NewRedis(conf)
	manager := injector.NewSyncerManager(conf, db, agg, minerAgg, adapter, abiDecoderAPI, redisRedis)
	minerLocationTask := injector.NewMinerLocationTask(db)
	syncer := injector.NewFullActors(db, agg)
	adminAPI := injector.NewAdminAPI(manager)
	filpriceTask := injector.NewFilpriceTask(db)
	engine := newApp(conf, adapter, manager, minerLocationTask, syncer, adminAPI, filpriceTask)
	return engine, func() {
		cleanup()
	}, nil
}
