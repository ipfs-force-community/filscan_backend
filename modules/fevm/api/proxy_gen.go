// Code generated by github.com/filecoin-project/lotus/gen/api. DO NOT EDIT.

package fevm

import (
	"math/big"

	"gitlab.forceup.in/fil-data-factory/filscan-backend/pkg/chain"
	"golang.org/x/xerrors"
)

var ErrNotSupported = xerrors.New("method not supported")

type ABIDecoderAPIStruct struct {
	ContractAPIStruct

	FNSAPIStruct

	Internal struct {
	}
}

type ABIDecoderAPIStub struct {
	ContractAPIStub

	FNSAPIStub
}

type ContractAPIStruct struct {
	Internal struct {
		CallContract func(p0 []byte, p1 string, p2 string, p3 []*ContractParam) ([]interface{}, error) ``

		ChainHead func() (chain.Epoch, error) ``

		DecodeEventHexAddress func(p0 string) (string, error) ``

		DecodeEventInput func(p0 []byte, p1 []byte, p2 []byte) (*DecodeEventInputReply, error) ``

		DecodeMethodInput func(p0 []byte, p1 []byte) (*DecodeMethodInputReply, error) ``

		DetectContractProtocol func(p0 []byte) (Protocols, error) ``

		HexToBigInt func(p0 string) (*big.Int, error) ``

		HexToEthAddress func(p0 string) (string, error) ``

		LookupEvent func(p0 []byte, p1 []byte) (string, error) ``

		LookupMethod func(p0 []byte, p1 []byte) (string, error) ``

		ParseABISignatures func(p0 []byte) ([]*ABISignature, error) ``
	}
}

type ContractAPIStub struct {
}

type FNSAPIStruct struct {
	Internal struct {
		FNSAvailable func(p0 Contract) error ``

		FNSBalanceOf func(p0 Contract, p1 string) (int64, error) ``

		FNSFilAddr func(p0 Contract, p1 string) (string, error) ``

		FNSGetNameByNode func(p0 Contract, p1 string) (string, error) ``

		FNSName func(p0 Contract, p1 string) (string, error) ``

		FNSNameExpires func(p0 Contract, p1 string) (int64, error) ``

		FNSNameOf func(p0 Contract, p1 string) (string, error) ``

		FNSNode func(p0 Contract, p1 string) (string, error) ``

		FNSNodeName func(p0 Contract, p1 string) (string, error) ``

		FNSOwner func(p0 Contract, p1 string) (string, error) ``

		FNSOwnerOf func(p0 Contract, p1 string) (string, error) ``

		FNSTokenId func(p0 string) (string, error) ``

		FNSTokenNode func(p0 string) (string, error) ``

		FNSTokenOfOwnerByIndex func(p0 Contract, p1 string, p2 uint64) (string, error) ``
	}
}

type FNSAPIStub struct {
}

func (s *ContractAPIStruct) CallContract(p0 []byte, p1 string, p2 string, p3 []*ContractParam) ([]interface{}, error) {
	if s.Internal.CallContract == nil {
		return *new([]interface{}), ErrNotSupported
	}
	return s.Internal.CallContract(p0, p1, p2, p3)
}

func (s *ContractAPIStub) CallContract(p0 []byte, p1 string, p2 string, p3 []*ContractParam) ([]interface{}, error) {
	return *new([]interface{}), ErrNotSupported
}

func (s *ContractAPIStruct) ChainHead() (chain.Epoch, error) {
	if s.Internal.ChainHead == nil {
		return *new(chain.Epoch), ErrNotSupported
	}
	return s.Internal.ChainHead()
}

func (s *ContractAPIStub) ChainHead() (chain.Epoch, error) {
	return *new(chain.Epoch), ErrNotSupported
}

func (s *ContractAPIStruct) DecodeEventHexAddress(p0 string) (string, error) {
	if s.Internal.DecodeEventHexAddress == nil {
		return "", ErrNotSupported
	}
	return s.Internal.DecodeEventHexAddress(p0)
}

func (s *ContractAPIStub) DecodeEventHexAddress(p0 string) (string, error) {
	return "", ErrNotSupported
}

func (s *ContractAPIStruct) DecodeEventInput(p0 []byte, p1 []byte, p2 []byte) (*DecodeEventInputReply, error) {
	if s.Internal.DecodeEventInput == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.DecodeEventInput(p0, p1, p2)
}

func (s *ContractAPIStub) DecodeEventInput(p0 []byte, p1 []byte, p2 []byte) (*DecodeEventInputReply, error) {
	return nil, ErrNotSupported
}

func (s *ContractAPIStruct) DecodeMethodInput(p0 []byte, p1 []byte) (*DecodeMethodInputReply, error) {
	if s.Internal.DecodeMethodInput == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.DecodeMethodInput(p0, p1)
}

func (s *ContractAPIStub) DecodeMethodInput(p0 []byte, p1 []byte) (*DecodeMethodInputReply, error) {
	return nil, ErrNotSupported
}

func (s *ContractAPIStruct) DetectContractProtocol(p0 []byte) (Protocols, error) {
	if s.Internal.DetectContractProtocol == nil {
		return *new(Protocols), ErrNotSupported
	}
	return s.Internal.DetectContractProtocol(p0)
}

func (s *ContractAPIStub) DetectContractProtocol(p0 []byte) (Protocols, error) {
	return *new(Protocols), ErrNotSupported
}

func (s *ContractAPIStruct) HexToBigInt(p0 string) (*big.Int, error) {
	if s.Internal.HexToBigInt == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.HexToBigInt(p0)
}

func (s *ContractAPIStub) HexToBigInt(p0 string) (*big.Int, error) {
	return nil, ErrNotSupported
}

func (s *ContractAPIStruct) HexToEthAddress(p0 string) (string, error) {
	if s.Internal.HexToEthAddress == nil {
		return "", ErrNotSupported
	}
	return s.Internal.HexToEthAddress(p0)
}

func (s *ContractAPIStub) HexToEthAddress(p0 string) (string, error) {
	return "", ErrNotSupported
}

func (s *ContractAPIStruct) LookupEvent(p0 []byte, p1 []byte) (string, error) {
	if s.Internal.LookupEvent == nil {
		return "", ErrNotSupported
	}
	return s.Internal.LookupEvent(p0, p1)
}

func (s *ContractAPIStub) LookupEvent(p0 []byte, p1 []byte) (string, error) {
	return "", ErrNotSupported
}

func (s *ContractAPIStruct) LookupMethod(p0 []byte, p1 []byte) (string, error) {
	if s.Internal.LookupMethod == nil {
		return "", ErrNotSupported
	}
	return s.Internal.LookupMethod(p0, p1)
}

func (s *ContractAPIStub) LookupMethod(p0 []byte, p1 []byte) (string, error) {
	return "", ErrNotSupported
}

func (s *ContractAPIStruct) ParseABISignatures(p0 []byte) ([]*ABISignature, error) {
	if s.Internal.ParseABISignatures == nil {
		return *new([]*ABISignature), ErrNotSupported
	}
	return s.Internal.ParseABISignatures(p0)
}

func (s *ContractAPIStub) ParseABISignatures(p0 []byte) ([]*ABISignature, error) {
	return *new([]*ABISignature), ErrNotSupported
}

func (s *FNSAPIStruct) FNSAvailable(p0 Contract) error {
	if s.Internal.FNSAvailable == nil {
		return ErrNotSupported
	}
	return s.Internal.FNSAvailable(p0)
}

func (s *FNSAPIStub) FNSAvailable(p0 Contract) error {
	return ErrNotSupported
}

func (s *FNSAPIStruct) FNSBalanceOf(p0 Contract, p1 string) (int64, error) {
	if s.Internal.FNSBalanceOf == nil {
		return 0, ErrNotSupported
	}
	return s.Internal.FNSBalanceOf(p0, p1)
}

func (s *FNSAPIStub) FNSBalanceOf(p0 Contract, p1 string) (int64, error) {
	return 0, ErrNotSupported
}

func (s *FNSAPIStruct) FNSFilAddr(p0 Contract, p1 string) (string, error) {
	if s.Internal.FNSFilAddr == nil {
		return "", ErrNotSupported
	}
	return s.Internal.FNSFilAddr(p0, p1)
}

func (s *FNSAPIStub) FNSFilAddr(p0 Contract, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *FNSAPIStruct) FNSGetNameByNode(p0 Contract, p1 string) (string, error) {
	if s.Internal.FNSGetNameByNode == nil {
		return "", ErrNotSupported
	}
	return s.Internal.FNSGetNameByNode(p0, p1)
}

func (s *FNSAPIStub) FNSGetNameByNode(p0 Contract, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *FNSAPIStruct) FNSName(p0 Contract, p1 string) (string, error) {
	if s.Internal.FNSName == nil {
		return "", ErrNotSupported
	}
	return s.Internal.FNSName(p0, p1)
}

func (s *FNSAPIStub) FNSName(p0 Contract, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *FNSAPIStruct) FNSNameExpires(p0 Contract, p1 string) (int64, error) {
	if s.Internal.FNSNameExpires == nil {
		return 0, ErrNotSupported
	}
	return s.Internal.FNSNameExpires(p0, p1)
}

func (s *FNSAPIStub) FNSNameExpires(p0 Contract, p1 string) (int64, error) {
	return 0, ErrNotSupported
}

func (s *FNSAPIStruct) FNSNameOf(p0 Contract, p1 string) (string, error) {
	if s.Internal.FNSNameOf == nil {
		return "", ErrNotSupported
	}
	return s.Internal.FNSNameOf(p0, p1)
}

func (s *FNSAPIStub) FNSNameOf(p0 Contract, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *FNSAPIStruct) FNSNode(p0 Contract, p1 string) (string, error) {
	if s.Internal.FNSNode == nil {
		return "", ErrNotSupported
	}
	return s.Internal.FNSNode(p0, p1)
}

func (s *FNSAPIStub) FNSNode(p0 Contract, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *FNSAPIStruct) FNSNodeName(p0 Contract, p1 string) (string, error) {
	if s.Internal.FNSNodeName == nil {
		return "", ErrNotSupported
	}
	return s.Internal.FNSNodeName(p0, p1)
}

func (s *FNSAPIStub) FNSNodeName(p0 Contract, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *FNSAPIStruct) FNSOwner(p0 Contract, p1 string) (string, error) {
	if s.Internal.FNSOwner == nil {
		return "", ErrNotSupported
	}
	return s.Internal.FNSOwner(p0, p1)
}

func (s *FNSAPIStub) FNSOwner(p0 Contract, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *FNSAPIStruct) FNSOwnerOf(p0 Contract, p1 string) (string, error) {
	if s.Internal.FNSOwnerOf == nil {
		return "", ErrNotSupported
	}
	return s.Internal.FNSOwnerOf(p0, p1)
}

func (s *FNSAPIStub) FNSOwnerOf(p0 Contract, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *FNSAPIStruct) FNSTokenId(p0 string) (string, error) {
	if s.Internal.FNSTokenId == nil {
		return "", ErrNotSupported
	}
	return s.Internal.FNSTokenId(p0)
}

func (s *FNSAPIStub) FNSTokenId(p0 string) (string, error) {
	return "", ErrNotSupported
}

func (s *FNSAPIStruct) FNSTokenNode(p0 string) (string, error) {
	if s.Internal.FNSTokenNode == nil {
		return "", ErrNotSupported
	}
	return s.Internal.FNSTokenNode(p0)
}

func (s *FNSAPIStub) FNSTokenNode(p0 string) (string, error) {
	return "", ErrNotSupported
}

func (s *FNSAPIStruct) FNSTokenOfOwnerByIndex(p0 Contract, p1 string, p2 uint64) (string, error) {
	if s.Internal.FNSTokenOfOwnerByIndex == nil {
		return "", ErrNotSupported
	}
	return s.Internal.FNSTokenOfOwnerByIndex(p0, p1, p2)
}

func (s *FNSAPIStub) FNSTokenOfOwnerByIndex(p0 Contract, p1 string, p2 uint64) (string, error) {
	return "", ErrNotSupported
}

var _ ABIDecoderAPI = new(ABIDecoderAPIStruct)
var _ ContractAPI = new(ContractAPIStruct)
var _ FNSAPI = new(FNSAPIStruct)
